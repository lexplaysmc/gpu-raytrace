#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uint hash(uint x) {
    x += (x << 10u);
    x ^= (x >>  6u);
    x += (x <<  3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

float rng(float x) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32
    uint m = hash(floatBitsToUint(x));

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat(m);       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}
float range(float x, float xmin, float xmax) {
    return rng(x) * (xmax - xmin) + xmin;
}
vec2 random_normal(float x) {
    x = rng(x);
    float theta = 2 * 3.1415926 * x;
    x = rng(x);
	float rho = sqrt(-2 * log(x));
	return vec2(x, rho * cos(theta));
}
vec4 random_dir(float seed) {
    vec2 x = random_normal(seed);
    vec2 y = random_normal(x.x);
    vec2 z = random_normal(y.x);
    return vec4(normalize(vec3(x.y, y.y, z.y)), z.x);
}
vec4 random_hemisphere(float seed, vec3 normal) {
    vec4 dir = random_dir(seed);
    float new_seed = dir.w;
    if (dot(dir.xyz, normal) > 0) {
        return dir;
    };
    return vec4(-dir.xyz, new_seed);
}
vec3 refract_dir(vec3 i, vec3 n, float etai_etat) {
    float cos_theta = min(dot(-i, n), 1);
    vec3 r_out_perp =  etai_etat * (i + cos_theta*n);
    vec3 r_out_parallel = -sqrt(abs(1 - dot(r_out_perp, r_out_perp))) * n;
    return r_out_perp + r_out_parallel;
}
float reflectance(float cosine, float ior) {
    float r0 = (1-ior)/(1+ior);
    r0 = pow(r0, 2);
    return r0 + (1-r0)*pow((1-cosine), 5);
}

struct Ray {
    vec3 org;
    vec3 dir;
};
vec3 at(Ray ray, float t) {
    return ray.org + ray.dir * t;
}
struct hit_rec {
    vec3 p;
    float t;
    vec3 n;
    bool hit;
    bool ff;
    uint id;
};
hit_rec set_ff(hit_rec rec, Ray r, vec3 outward_normal) {
    if (dot(r.dir, outward_normal) <= 0) {
        rec.ff = true;
    } else {
        rec.ff = false;
        rec.n = -rec.n;
    };
    return rec;
}
struct Sphere {
    vec3 center;
    float r;
};

layout(binding = 0) uniform UniformBufferObject {
    uvec4 size;
    vec3 lookfrom;
    float vfov;
    vec3 lookat;

    Sphere spheres[64];
    vec4 materials[64];
    // materials
    // diffuse: vec4(col, inf)
    // metal: vec4(col, fuzz)
    // dielectric: vec4(ir, inf, inf, inf)
    // emmisive: vec4(col, -inf)
};
layout(std430, binding = 1) buffer OutSSBO {
    vec4 pixels[ ];
};

hit_rec hit_sphere(Ray r, Sphere sphere, float t_min, float t_max) {
    hit_rec rec;
    rec.hit = false;

    vec3 oc = r.org - sphere.center;
    float a = dot(r.dir, r.dir);
    float h = dot(r.dir, oc);
    float c = dot(oc, oc) - sphere.r*sphere.r;
    float discriminant = h*h - a*c;
    if (discriminant < 0) {
        return rec;
    };

    float sqrtd = sqrt(discriminant);
    float root = (-h - sqrtd) / a;
    if (root <= t_min || t_max <= root) {
        root = (-h + sqrtd) / a;
        if (root <= t_min || t_max <= root) {
            return rec;
        };
    };

    rec.t = root;
    rec.p = at(r, rec.t);
    rec.n = (rec.p - sphere.center)/sphere.r;
    rec.hit = true;
    return set_ff(rec, r, rec.n);
}

hit_rec trace(Ray ray) {
    uint sphere_count = size.z;

    hit_rec closest;
    closest.hit = false;
    closest.id = 0;
    for (int i=0; i<sphere_count; i++) {
        if (!closest.hit) {
            closest = hit_sphere(ray, spheres[i], 0.0001, 1000);
            closest.id = i;
        } else {
            hit_rec rec = hit_sphere(ray, spheres[i], 0.0001, closest.t);
            if (rec.hit) {
                closest = rec;
                closest.id = i;
            };
        }
    };
    return closest;
}

const uint max_depth = 50;
vec3 ray_color(Ray ray, float seed) {
    vec3 col = vec3(1);
    for (uint depth = 0; depth < max_depth; depth++) {
        hit_rec rec = trace(ray);
        vec3 c;
        c = materials[rec.id].xyz;
        if (!rec.hit) {
            float sky_t = 0.5*(ray.dir.y + 1.0);
            c = mix(vec3(1), vec3(0.5, 0.7, 1), sky_t);
        };
        if (!isinf(materials[rec.id].y)) {
            col *= c;
        };
        if (!rec.hit) {
            // return vec3(1, 0, 0);
            break;
        };
        vec4 dir = random_dir(seed);
        seed = dir.w;
        if (isinf(materials[rec.id].y)) {
            float ior;
            if (rec.ff) {
                ior = 1/materials[rec.id].x;
            } else {
                ior = materials[rec.id].x;
            }
            float cos_theta = min(dot(-normalize(ray.dir), rec.n), 1.0);
            float sin_theta = sqrt(1.0 - cos_theta*cos_theta);

            bool cannot_refract = ior * sin_theta > 1.0;
            if (cannot_refract || reflectance(cos_theta, ior) > dir.w) {
                ray.dir = reflect(ray.dir, normalize(rec.n));
            } else {
                ray.dir = refract_dir(normalize(ray.dir), normalize(rec.n), ior);
            }
            // return vec3(1, 0, 0);
        } else if (isinf(materials[rec.id].w) && materials[rec.id].w > 0) {
            ray.dir = dir.xyz + rec.n;
        } else if (isinf(materials[rec.id].w)) {
            break;
        } else {
            ray.dir = reflect(ray.dir, normalize(rec.n)) + (dir.xyz * materials[rec.id].w);
            // if (dot(ray.dir, rec.n) <= 0) {
            //     return vec3(0);
            // }
        };
        ray.org = rec.p;
    };
    return col;
}

const vec3 up = vec3(0, 1, 0);
void main() {
    if (gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) {
        return;
    };

    uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*size.x;
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(size.xy);
    float seed = float(size.w/1024 + index);
    float ar = float(size.x)/float(size.y);

    float focal_length = length(lookfrom - lookat);
    float h = tan(vfov/2);
    vec2 viewport = vec2(2.0 * h * focal_length * ar, 2.0 * h * focal_length);

    vec3 w = normalize(lookfrom - lookat);
    vec3 u = normalize(cross(up, w));
    vec3 v = cross(w, u);

    vec3 viewport_u = viewport.x * u;
    vec3 viewport_v = viewport.y * -v;
    vec3 du = viewport_u / size.x;
    vec3 dv = viewport_v / size.y;

    vec3 campos = lookfrom;

    seed = rng(seed);
    float rx = seed;
    seed = rng(seed);
    float ry = seed;

    vec3 viewport_tl = campos - focal_length * w - viewport_u/2 - viewport_v/2;
    vec3 pixel = viewport_tl + (du + dv)/2 + du*(float(gl_GlobalInvocationID.x) + rx - 0.5) + dv*(float(gl_GlobalInvocationID.y) + ry - 0.5);

    Ray ray;
    ray.org = campos;
    ray.dir = normalize(pixel - campos);
    pixels[index] += vec4(pow(ray_color(ray, seed), vec3(1/2.2)), 1.0);
    // pixels[index] = materials[2];
}